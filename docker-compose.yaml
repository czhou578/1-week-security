version: '3.3'

services:
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: insecure_app
    environment:
      - DEBUG=True
      - USE_DOCKER_SECRETS=true  # Tell app to use secrets
    ports:
      - "8000:1337"
    depends_on:
      - db
    networks:
      - backend-network
      - frontend-network
    volumes:
      - ./app:/app
    # Give app access to secrets
    secrets:
      - db_user
      - db_password
      - db_name
      - db_host
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "1337", "--reload"]

  db:                    # This name must match db_host.txt
    image: postgres:16
    container_name: postgres_db
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB_FILE=/run/secrets/db_name
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    restart: always
    networks:
      - backend-network
    secrets:
      - db_user
      - db_password
      - db_name

  frontend:
    build: 
      context: ./frontend/insecure-frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - app
    restart: always
    networks:
      - frontend-network
    volumes:
      - ./frontend/insecure-frontend/src:/app/src
      - ./frontend/insecure-frontend/public:/app/public
      - /app/node_modules

  proxy:
    build: ./caddy
    container_name: caddy
    depends_on:
      - app
    environment:
      - LETSENCRYPT_EMAIL
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    ports:
      - "80:80"
      - "443:443"
      - "1337:1337"
    restart: always
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
    command: ["caddy", "run", "--watch", "--config", "/etc/caddy/Caddyfile", "--adapter", "caddyfile"]
    networks:
      - frontend-network
      - proxy-network

networks:
  backend-network:
    driver: bridge
    internal: true
  
  frontend-network:
    driver: bridge
    internal: false

  proxy-network:
    driver: bridge
    internal: false   

volumes:
  caddy_data:
  postgres_data:

secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  app_db_user:
    file: ./secrets/app_db_user.txt
  app_db_password:
    file: ./secrets/app_db_password.txt
  db_name:
    file: ./secrets/db_name.txt
  db_host:
    file: ./secrets/db_host.txt